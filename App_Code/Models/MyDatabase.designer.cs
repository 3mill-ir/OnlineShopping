#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ASPNETDB")]
	public partial class MyDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertSet(Set instance);
    partial void UpdateSet(Set instance);
    partial void DeleteSet(Set instance);
    partial void InsertMaterialPicture(MaterialPicture instance);
    partial void UpdateMaterialPicture(MaterialPicture instance);
    partial void DeleteMaterialPicture(MaterialPicture instance);
    partial void InsertMaterialVote(MaterialVote instance);
    partial void UpdateMaterialVote(MaterialVote instance);
    partial void DeleteMaterialVote(MaterialVote instance);
    partial void InsertMaterialPrice(MaterialPrice instance);
    partial void UpdateMaterialPrice(MaterialPrice instance);
    partial void DeleteMaterialPrice(MaterialPrice instance);
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertMaterial(Material instance);
    partial void UpdateMaterial(Material instance);
    partial void DeleteMaterial(Material instance);
    partial void InsertMaterialType(MaterialType instance);
    partial void UpdateMaterialType(MaterialType instance);
    partial void DeleteMaterialType(MaterialType instance);
    partial void InsertMaterialTypeFieldValue(MaterialTypeFieldValue instance);
    partial void UpdateMaterialTypeFieldValue(MaterialTypeFieldValue instance);
    partial void DeleteMaterialTypeFieldValue(MaterialTypeFieldValue instance);
    partial void InsertFieldUnit(FieldUnit instance);
    partial void UpdateFieldUnit(FieldUnit instance);
    partial void DeleteFieldUnit(FieldUnit instance);
    partial void InsertMaterialTypeField(MaterialTypeField instance);
    partial void UpdateMaterialTypeField(MaterialTypeField instance);
    partial void DeleteMaterialTypeField(MaterialTypeField instance);
    partial void InsertShoppingCart(ShoppingCart instance);
    partial void UpdateShoppingCart(ShoppingCart instance);
    partial void DeleteShoppingCart(ShoppingCart instance);
    partial void InsertMemberInterest(MemberInterest instance);
    partial void UpdateMemberInterest(MemberInterest instance);
    partial void DeleteMemberInterest(MemberInterest instance);
    partial void InsertMaterialKeyword(MaterialKeyword instance);
    partial void UpdateMaterialKeyword(MaterialKeyword instance);
    partial void DeleteMaterialKeyword(MaterialKeyword instance);
    partial void InsertShoppingCartItem(ShoppingCartItem instance);
    partial void UpdateShoppingCartItem(ShoppingCartItem instance);
    partial void DeleteShoppingCartItem(ShoppingCartItem instance);
    partial void InsertInboxMessage(InboxMessage instance);
    partial void UpdateInboxMessage(InboxMessage instance);
    partial void DeleteInboxMessage(InboxMessage instance);
    partial void InsertSentBoxMessage(SentBoxMessage instance);
    partial void UpdateSentBoxMessage(SentBoxMessage instance);
    partial void DeleteSentBoxMessage(SentBoxMessage instance);
    partial void InsertLogin(Login instance);
    partial void UpdateLogin(Login instance);
    partial void DeleteLogin(Login instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertShopLogin(ShopLogin instance);
    partial void UpdateShopLogin(ShopLogin instance);
    partial void DeleteShopLogin(ShopLogin instance);
    partial void InsertShop(Shop instance);
    partial void UpdateShop(Shop instance);
    partial void DeleteShop(Shop instance);
    partial void InsertSlidingImage(SlidingImage instance);
    partial void UpdateSlidingImage(SlidingImage instance);
    partial void DeleteSlidingImage(SlidingImage instance);
    #endregion
		
		public MyDatabaseDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ASPNETDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MyDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Set> Sets
		{
			get
			{
				return this.GetTable<Set>();
			}
		}
		
		public System.Data.Linq.Table<MaterialPicture> MaterialPictures
		{
			get
			{
				return this.GetTable<MaterialPicture>();
			}
		}
		
		public System.Data.Linq.Table<MaterialVote> MaterialVotes
		{
			get
			{
				return this.GetTable<MaterialVote>();
			}
		}
		
		public System.Data.Linq.Table<MaterialPrice> MaterialPrices
		{
			get
			{
				return this.GetTable<MaterialPrice>();
			}
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<Material> Materials
		{
			get
			{
				return this.GetTable<Material>();
			}
		}
		
		public System.Data.Linq.Table<MaterialType> MaterialTypes
		{
			get
			{
				return this.GetTable<MaterialType>();
			}
		}
		
		public System.Data.Linq.Table<MaterialTypeFieldValue> MaterialTypeFieldValues
		{
			get
			{
				return this.GetTable<MaterialTypeFieldValue>();
			}
		}
		
		public System.Data.Linq.Table<FieldUnit> FieldUnits
		{
			get
			{
				return this.GetTable<FieldUnit>();
			}
		}
		
		public System.Data.Linq.Table<MaterialTypeField> MaterialTypeFields
		{
			get
			{
				return this.GetTable<MaterialTypeField>();
			}
		}
		
		public System.Data.Linq.Table<ShoppingCart> ShoppingCarts
		{
			get
			{
				return this.GetTable<ShoppingCart>();
			}
		}
		
		public System.Data.Linq.Table<MemberInterest> MemberInterests
		{
			get
			{
				return this.GetTable<MemberInterest>();
			}
		}
		
		public System.Data.Linq.Table<MaterialKeyword> MaterialKeywords
		{
			get
			{
				return this.GetTable<MaterialKeyword>();
			}
		}
		
		public System.Data.Linq.Table<ShoppingCartItem> ShoppingCartItems
		{
			get
			{
				return this.GetTable<ShoppingCartItem>();
			}
		}
		
		public System.Data.Linq.Table<InboxMessage> InboxMessages
		{
			get
			{
				return this.GetTable<InboxMessage>();
			}
		}
		
		public System.Data.Linq.Table<SentBoxMessage> SentBoxMessages
		{
			get
			{
				return this.GetTable<SentBoxMessage>();
			}
		}
		
		public System.Data.Linq.Table<Login> Logins
		{
			get
			{
				return this.GetTable<Login>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<ShopLogin> ShopLogins
		{
			get
			{
				return this.GetTable<ShopLogin>();
			}
		}
		
		public System.Data.Linq.Table<Shop> Shops
		{
			get
			{
				return this.GetTable<Shop>();
			}
		}
		
		public System.Data.Linq.Table<SlidingImage> SlidingImages
		{
			get
			{
				return this.GetTable<SlidingImage>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _Name;
		
		private double _Sequence;
		
		private EntitySet<Set> _Sets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSequenceChanging(double value);
    partial void OnSequenceChanged();
    #endregion
		
		public Category()
		{
			this._Sets = new EntitySet<Set>(new Action<Set>(this.attach_Sets), new Action<Set>(this.detach_Sets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sequence", DbType="Float NOT NULL")]
		public double Sequence
		{
			get
			{
				return this._Sequence;
			}
			set
			{
				if ((this._Sequence != value))
				{
					this.OnSequenceChanging(value);
					this.SendPropertyChanging();
					this._Sequence = value;
					this.SendPropertyChanged("Sequence");
					this.OnSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Set", Storage="_Sets", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<Set> Sets
		{
			get
			{
				return this._Sets;
			}
			set
			{
				this._Sets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sets(Set entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Sets(Set entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sets")]
	public partial class Set : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SetID;
		
		private int _CategoryID;
		
		private string _Name;
		
		private double _Sequence;
		
		private EntitySet<Material> _Materials;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSetIDChanging(int value);
    partial void OnSetIDChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSequenceChanging(double value);
    partial void OnSequenceChanged();
    #endregion
		
		public Set()
		{
			this._Materials = new EntitySet<Material>(new Action<Material>(this.attach_Materials), new Action<Material>(this.detach_Materials));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SetID
		{
			get
			{
				return this._SetID;
			}
			set
			{
				if ((this._SetID != value))
				{
					this.OnSetIDChanging(value);
					this.SendPropertyChanging();
					this._SetID = value;
					this.SendPropertyChanged("SetID");
					this.OnSetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sequence", DbType="Float NOT NULL")]
		public double Sequence
		{
			get
			{
				return this._Sequence;
			}
			set
			{
				if ((this._Sequence != value))
				{
					this.OnSequenceChanging(value);
					this.SendPropertyChanging();
					this._Sequence = value;
					this.SendPropertyChanged("Sequence");
					this.OnSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Set_Material", Storage="_Materials", ThisKey="SetID", OtherKey="SetID")]
		public EntitySet<Material> Materials
		{
			get
			{
				return this._Materials;
			}
			set
			{
				this._Materials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Set", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Sets.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Sets.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Materials(Material entity)
		{
			this.SendPropertyChanging();
			entity.Set = this;
		}
		
		private void detach_Materials(Material entity)
		{
			this.SendPropertyChanging();
			entity.Set = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MaterialPictures")]
	public partial class MaterialPicture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PictureID;
		
		private int _MaterialID;
		
		private string _PicName;
		
		private bool _IsAvatar;
		
		private EntityRef<Material> _Material;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPictureIDChanging(int value);
    partial void OnPictureIDChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnPicNameChanging(string value);
    partial void OnPicNameChanged();
    partial void OnIsAvatarChanging(bool value);
    partial void OnIsAvatarChanged();
    #endregion
		
		public MaterialPicture()
		{
			this._Material = default(EntityRef<Material>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PictureID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PictureID
		{
			get
			{
				return this._PictureID;
			}
			set
			{
				if ((this._PictureID != value))
				{
					this.OnPictureIDChanging(value);
					this.SendPropertyChanging();
					this._PictureID = value;
					this.SendPropertyChanged("PictureID");
					this.OnPictureIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PicName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PicName
		{
			get
			{
				return this._PicName;
			}
			set
			{
				if ((this._PicName != value))
				{
					this.OnPicNameChanging(value);
					this.SendPropertyChanging();
					this._PicName = value;
					this.SendPropertyChanged("PicName");
					this.OnPicNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAvatar", DbType="Bit NOT NULL")]
		public bool IsAvatar
		{
			get
			{
				return this._IsAvatar;
			}
			set
			{
				if ((this._IsAvatar != value))
				{
					this.OnIsAvatarChanging(value);
					this.SendPropertyChanging();
					this._IsAvatar = value;
					this.SendPropertyChanged("IsAvatar");
					this.OnIsAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_MaterialPicture", Storage="_Material", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.Pictures.Remove(this);
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.Pictures.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(int);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MaterialVotes")]
	public partial class MaterialVote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VoteID;
		
		private int _MaterialID;
		
		private bool _Vote;
		
		private int _VoterType;
		
		private string _Voter;
		
		private System.DateTime _DateOfVote;
		
		private EntityRef<Material> _Material;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVoteIDChanging(int value);
    partial void OnVoteIDChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnVoteChanging(bool value);
    partial void OnVoteChanged();
    partial void OnVoterTypeChanging(int value);
    partial void OnVoterTypeChanged();
    partial void OnVoterChanging(string value);
    partial void OnVoterChanged();
    partial void OnDateOfVoteChanging(System.DateTime value);
    partial void OnDateOfVoteChanged();
    #endregion
		
		public MaterialVote()
		{
			this._Material = default(EntityRef<Material>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoteID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VoteID
		{
			get
			{
				return this._VoteID;
			}
			set
			{
				if ((this._VoteID != value))
				{
					this.OnVoteIDChanging(value);
					this.SendPropertyChanging();
					this._VoteID = value;
					this.SendPropertyChanged("VoteID");
					this.OnVoteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vote", DbType="Bit NOT NULL")]
		public bool Vote
		{
			get
			{
				return this._Vote;
			}
			set
			{
				if ((this._Vote != value))
				{
					this.OnVoteChanging(value);
					this.SendPropertyChanging();
					this._Vote = value;
					this.SendPropertyChanged("Vote");
					this.OnVoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoterType", DbType="Int NOT NULL")]
		public int VoterType
		{
			get
			{
				return this._VoterType;
			}
			set
			{
				if ((this._VoterType != value))
				{
					this.OnVoterTypeChanging(value);
					this.SendPropertyChanging();
					this._VoterType = value;
					this.SendPropertyChanged("VoterType");
					this.OnVoterTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Voter", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Voter
		{
			get
			{
				return this._Voter;
			}
			set
			{
				if ((this._Voter != value))
				{
					this.OnVoterChanging(value);
					this.SendPropertyChanging();
					this._Voter = value;
					this.SendPropertyChanged("Voter");
					this.OnVoterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfVote", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfVote
		{
			get
			{
				return this._DateOfVote;
			}
			set
			{
				if ((this._DateOfVote != value))
				{
					this.OnDateOfVoteChanging(value);
					this.SendPropertyChanging();
					this._DateOfVote = value;
					this.SendPropertyChanged("DateOfVote");
					this.OnDateOfVoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_MaterialVote", Storage="_Material", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.Votes.Remove(this);
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.Votes.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(int);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MaterialPrices")]
	public partial class MaterialPrice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PriceID;
		
		private int _MaterialID;
		
		private int _Price;
		
		private int _Unit;
		
		private bool _IsCurrent;
		
		private System.DateTime _DateOfAdd;
		
		private EntityRef<Material> _Material;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPriceIDChanging(int value);
    partial void OnPriceIDChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnUnitChanging(int value);
    partial void OnUnitChanged();
    partial void OnIsCurrentChanging(bool value);
    partial void OnIsCurrentChanged();
    partial void OnDateOfAddChanging(System.DateTime value);
    partial void OnDateOfAddChanged();
    #endregion
		
		public MaterialPrice()
		{
			this._Material = default(EntityRef<Material>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PriceID
		{
			get
			{
				return this._PriceID;
			}
			set
			{
				if ((this._PriceID != value))
				{
					this.OnPriceIDChanging(value);
					this.SendPropertyChanging();
					this._PriceID = value;
					this.SendPropertyChanged("PriceID");
					this.OnPriceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="Int NOT NULL")]
		public int Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCurrent", DbType="Bit NOT NULL")]
		public bool IsCurrent
		{
			get
			{
				return this._IsCurrent;
			}
			set
			{
				if ((this._IsCurrent != value))
				{
					this.OnIsCurrentChanging(value);
					this.SendPropertyChanging();
					this._IsCurrent = value;
					this.SendPropertyChanged("IsCurrent");
					this.OnIsCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAdd", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfAdd
		{
			get
			{
				return this._DateOfAdd;
			}
			set
			{
				if ((this._DateOfAdd != value))
				{
					this.OnDateOfAddChanging(value);
					this.SendPropertyChanging();
					this._DateOfAdd = value;
					this.SendPropertyChanged("DateOfAdd");
					this.OnDateOfAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_MaterialPrice", Storage="_Material", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.Prices.Remove(this);
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.Prices.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(int);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.States")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StateID;
		
		private string _StateName;
		
		private EntitySet<City> _Cities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnStateNameChanging(string value);
    partial void OnStateNameChanged();
    #endregion
		
		public State()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateName", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string StateName
		{
			get
			{
				return this._StateName;
			}
			set
			{
				if ((this._StateName != value))
				{
					this.OnStateNameChanging(value);
					this.SendPropertyChanging();
					this._StateName = value;
					this.SendPropertyChanged("StateName");
					this.OnStateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_City", Storage="_Cities", ThisKey="StateID", OtherKey="StateID")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Members")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberID;
		
		private string _Email;
		
		private string _Name;
		
		private string _LastName;
		
		private string _Mobile;
		
		private string _Tels;
		
		private int _CityID;
		
		private string _IP;
		
		private System.DateTime _DateOfJoin;
		
		private string _UserName;
		
		private EntitySet<ShoppingCart> _ShoppingCarts;
		
		private EntitySet<MemberInterest> _MemberInterests;
		
		private EntitySet<InboxMessage> _InboxMessages;
		
		private EntitySet<InboxMessage> _InboxMessages1;
		
		private EntitySet<SentBoxMessage> _SentBoxMessages;
		
		private EntitySet<SentBoxMessage> _SentBoxMessages1;
		
		private EntitySet<Login> _Logins;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnTelsChanging(string value);
    partial void OnTelsChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnDateOfJoinChanging(System.DateTime value);
    partial void OnDateOfJoinChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public Member()
		{
			this._ShoppingCarts = new EntitySet<ShoppingCart>(new Action<ShoppingCart>(this.attach_ShoppingCarts), new Action<ShoppingCart>(this.detach_ShoppingCarts));
			this._MemberInterests = new EntitySet<MemberInterest>(new Action<MemberInterest>(this.attach_MemberInterests), new Action<MemberInterest>(this.detach_MemberInterests));
			this._InboxMessages = new EntitySet<InboxMessage>(new Action<InboxMessage>(this.attach_InboxMessages), new Action<InboxMessage>(this.detach_InboxMessages));
			this._InboxMessages1 = new EntitySet<InboxMessage>(new Action<InboxMessage>(this.attach_InboxMessages1), new Action<InboxMessage>(this.detach_InboxMessages1));
			this._SentBoxMessages = new EntitySet<SentBoxMessage>(new Action<SentBoxMessage>(this.attach_SentBoxMessages), new Action<SentBoxMessage>(this.detach_SentBoxMessages));
			this._SentBoxMessages1 = new EntitySet<SentBoxMessage>(new Action<SentBoxMessage>(this.attach_SentBoxMessages1), new Action<SentBoxMessage>(this.detach_SentBoxMessages1));
			this._Logins = new EntitySet<Login>(new Action<Login>(this.attach_Logins), new Action<Login>(this.detach_Logins));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tels", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Tels
		{
			get
			{
				return this._Tels;
			}
			set
			{
				if ((this._Tels != value))
				{
					this.OnTelsChanging(value);
					this.SendPropertyChanging();
					this._Tels = value;
					this.SendPropertyChanged("Tels");
					this.OnTelsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfJoin", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfJoin
		{
			get
			{
				return this._DateOfJoin;
			}
			set
			{
				if ((this._DateOfJoin != value))
				{
					this.OnDateOfJoinChanging(value);
					this.SendPropertyChanging();
					this._DateOfJoin = value;
					this.SendPropertyChanged("DateOfJoin");
					this.OnDateOfJoinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_ShoppingCart", Storage="_ShoppingCarts", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<ShoppingCart> ShoppingCarts
		{
			get
			{
				return this._ShoppingCarts;
			}
			set
			{
				this._ShoppingCarts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_MemberInterest", Storage="_MemberInterests", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<MemberInterest> Interests
		{
			get
			{
				return this._MemberInterests;
			}
			set
			{
				this._MemberInterests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_InboxMessage", Storage="_InboxMessages", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<InboxMessage> InboxMessages
		{
			get
			{
				return this._InboxMessages;
			}
			set
			{
				this._InboxMessages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_InboxMessage1", Storage="_InboxMessages1", ThisKey="MemberID", OtherKey="SenderID")]
		public EntitySet<InboxMessage> XXXXXX
		{
			get
			{
				return this._InboxMessages1;
			}
			set
			{
				this._InboxMessages1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_SentBoxMessage", Storage="_SentBoxMessages", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<SentBoxMessage> SentBoxMessages
		{
			get
			{
				return this._SentBoxMessages;
			}
			set
			{
				this._SentBoxMessages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_SentBoxMessage1", Storage="_SentBoxMessages1", ThisKey="MemberID", OtherKey="RecieverID")]
		public EntitySet<SentBoxMessage> XXXXXXXXX
		{
			get
			{
				return this._SentBoxMessages1;
			}
			set
			{
				this._SentBoxMessages1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Login", Storage="_Logins", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<Login> Logins
		{
			get
			{
				return this._Logins;
			}
			set
			{
				this._Logins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Member", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ShoppingCarts(ShoppingCart entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_ShoppingCarts(ShoppingCart entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_MemberInterests(MemberInterest entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_MemberInterests(MemberInterest entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_InboxMessages(InboxMessage entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_InboxMessages(InboxMessage entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_InboxMessages1(InboxMessage entity)
		{
			this.SendPropertyChanging();
			entity.Sender = this;
		}
		
		private void detach_InboxMessages1(InboxMessage entity)
		{
			this.SendPropertyChanging();
			entity.Sender = null;
		}
		
		private void attach_SentBoxMessages(SentBoxMessage entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_SentBoxMessages(SentBoxMessage entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_SentBoxMessages1(SentBoxMessage entity)
		{
			this.SendPropertyChanging();
			entity.Reciever = this;
		}
		
		private void detach_SentBoxMessages1(SentBoxMessage entity)
		{
			this.SendPropertyChanging();
			entity.Reciever = null;
		}
		
		private void attach_Logins(Login entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Logins(Login entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Materials")]
	public partial class Material : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaterialID;
		
		private int _SetID;
		
		private int _TypeID;
		
		private int _ShopID;
		
		private string _Name;
		
		private string _Description;
		
		private string _Tags;
		
		private int _Unit;
		
		private int _Status;
		
		private System.Nullable<int> _Counts;
		
		private System.DateTime _DateOfAdd;
		
		private System.Nullable<double> _Weight;
		
		private int _WeightUnit;
		
		private System.Nullable<int> _Width;
		
		private System.Nullable<int> _Length;
		
		private System.Nullable<int> _Height;
		
		private int _PurchasePrice;
		
		private int _PurchasePriceUnit;
		
		private bool _Visible;
		
		private int _Reviews;
		
		private string _Code;
		
		private EntitySet<MaterialPicture> _Pictures;
		
		private EntitySet<MaterialVote> _Votes;
		
		private EntitySet<MaterialPrice> _Prices;
		
		private EntitySet<MaterialTypeFieldValue> _MaterialTypeFieldValues;
		
		private EntitySet<MaterialKeyword> _MaterialKeywords;
		
		private EntitySet<ShoppingCartItem> _ShoppingCartItems;
		
		private EntityRef<Set> _Set;
		
		private EntityRef<MaterialType> _Type;
		
		private EntityRef<Shop> _Shop;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnSetIDChanging(int value);
    partial void OnSetIDChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnShopIDChanging(int value);
    partial void OnShopIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnUnitChanging(int value);
    partial void OnUnitChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnCountsChanging(System.Nullable<int> value);
    partial void OnCountsChanged();
    partial void OnDateOfAddChanging(System.DateTime value);
    partial void OnDateOfAddChanged();
    partial void OnWeightChanging(System.Nullable<double> value);
    partial void OnWeightChanged();
    partial void OnWeightUnitChanging(int value);
    partial void OnWeightUnitChanged();
    partial void OnWidthChanging(System.Nullable<int> value);
    partial void OnWidthChanged();
    partial void OnLengthChanging(System.Nullable<int> value);
    partial void OnLengthChanged();
    partial void OnHeightChanging(System.Nullable<int> value);
    partial void OnHeightChanged();
    partial void OnPurchasePriceChanging(int value);
    partial void OnPurchasePriceChanged();
    partial void OnPurchasePriceUnitChanging(int value);
    partial void OnPurchasePriceUnitChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    partial void OnReviewsChanging(int value);
    partial void OnReviewsChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public Material()
		{
			this._Pictures = new EntitySet<MaterialPicture>(new Action<MaterialPicture>(this.attach_Pictures), new Action<MaterialPicture>(this.detach_Pictures));
			this._Votes = new EntitySet<MaterialVote>(new Action<MaterialVote>(this.attach_Votes), new Action<MaterialVote>(this.detach_Votes));
			this._Prices = new EntitySet<MaterialPrice>(new Action<MaterialPrice>(this.attach_Prices), new Action<MaterialPrice>(this.detach_Prices));
			this._MaterialTypeFieldValues = new EntitySet<MaterialTypeFieldValue>(new Action<MaterialTypeFieldValue>(this.attach_MaterialTypeFieldValues), new Action<MaterialTypeFieldValue>(this.detach_MaterialTypeFieldValues));
			this._MaterialKeywords = new EntitySet<MaterialKeyword>(new Action<MaterialKeyword>(this.attach_MaterialKeywords), new Action<MaterialKeyword>(this.detach_MaterialKeywords));
			this._ShoppingCartItems = new EntitySet<ShoppingCartItem>(new Action<ShoppingCartItem>(this.attach_ShoppingCartItems), new Action<ShoppingCartItem>(this.detach_ShoppingCartItems));
			this._Set = default(EntityRef<Set>);
			this._Type = default(EntityRef<MaterialType>);
			this._Shop = default(EntityRef<Shop>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetID", DbType="Int NOT NULL")]
		public int SetID
		{
			get
			{
				return this._SetID;
			}
			set
			{
				if ((this._SetID != value))
				{
					if (this._Set.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSetIDChanging(value);
					this.SendPropertyChanging();
					this._SetID = value;
					this.SendPropertyChanged("SetID");
					this.OnSetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShopID", DbType="Int NOT NULL")]
		public int ShopID
		{
			get
			{
				return this._ShopID;
			}
			set
			{
				if ((this._ShopID != value))
				{
					if (this._Shop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShopIDChanging(value);
					this.SendPropertyChanging();
					this._ShopID = value;
					this.SendPropertyChanged("ShopID");
					this.OnShopIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="Int NOT NULL")]
		public int Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Counts", DbType="Int")]
		public System.Nullable<int> Counts
		{
			get
			{
				return this._Counts;
			}
			set
			{
				if ((this._Counts != value))
				{
					this.OnCountsChanging(value);
					this.SendPropertyChanging();
					this._Counts = value;
					this.SendPropertyChanged("Counts");
					this.OnCountsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAdd", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfAdd
		{
			get
			{
				return this._DateOfAdd;
			}
			set
			{
				if ((this._DateOfAdd != value))
				{
					this.OnDateOfAddChanging(value);
					this.SendPropertyChanging();
					this._DateOfAdd = value;
					this.SendPropertyChanged("DateOfAdd");
					this.OnDateOfAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Float")]
		public System.Nullable<double> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeightUnit", DbType="Int NOT NULL")]
		public int WeightUnit
		{
			get
			{
				return this._WeightUnit;
			}
			set
			{
				if ((this._WeightUnit != value))
				{
					this.OnWeightUnitChanging(value);
					this.SendPropertyChanging();
					this._WeightUnit = value;
					this.SendPropertyChanged("WeightUnit");
					this.OnWeightUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Int")]
		public System.Nullable<int> Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Int")]
		public System.Nullable<int> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Int")]
		public System.Nullable<int> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchasePrice", DbType="Int NOT NULL")]
		public int PurchasePrice
		{
			get
			{
				return this._PurchasePrice;
			}
			set
			{
				if ((this._PurchasePrice != value))
				{
					this.OnPurchasePriceChanging(value);
					this.SendPropertyChanging();
					this._PurchasePrice = value;
					this.SendPropertyChanged("PurchasePrice");
					this.OnPurchasePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchasePriceUnit", DbType="Int NOT NULL")]
		public int PurchasePriceUnit
		{
			get
			{
				return this._PurchasePriceUnit;
			}
			set
			{
				if ((this._PurchasePriceUnit != value))
				{
					this.OnPurchasePriceUnitChanging(value);
					this.SendPropertyChanging();
					this._PurchasePriceUnit = value;
					this.SendPropertyChanged("PurchasePriceUnit");
					this.OnPurchasePriceUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reviews", DbType="Int NOT NULL")]
		public int Reviews
		{
			get
			{
				return this._Reviews;
			}
			set
			{
				if ((this._Reviews != value))
				{
					this.OnReviewsChanging(value);
					this.SendPropertyChanging();
					this._Reviews = value;
					this.SendPropertyChanged("Reviews");
					this.OnReviewsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_MaterialPicture", Storage="_Pictures", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<MaterialPicture> Pictures
		{
			get
			{
				return this._Pictures;
			}
			set
			{
				this._Pictures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_MaterialVote", Storage="_Votes", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<MaterialVote> Votes
		{
			get
			{
				return this._Votes;
			}
			set
			{
				this._Votes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_MaterialPrice", Storage="_Prices", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<MaterialPrice> Prices
		{
			get
			{
				return this._Prices;
			}
			set
			{
				this._Prices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_MaterialTypeFieldValue", Storage="_MaterialTypeFieldValues", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<MaterialTypeFieldValue> FieldValues
		{
			get
			{
				return this._MaterialTypeFieldValues;
			}
			set
			{
				this._MaterialTypeFieldValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_MaterialKeyword", Storage="_MaterialKeywords", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<MaterialKeyword> Keywords
		{
			get
			{
				return this._MaterialKeywords;
			}
			set
			{
				this._MaterialKeywords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_ShoppingCartItem", Storage="_ShoppingCartItems", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<ShoppingCartItem> ShoppingCartItems
		{
			get
			{
				return this._ShoppingCartItems;
			}
			set
			{
				this._ShoppingCartItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Set_Material", Storage="_Set", ThisKey="SetID", OtherKey="SetID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Set Set
		{
			get
			{
				return this._Set.Entity;
			}
			set
			{
				Set previousValue = this._Set.Entity;
				if (((previousValue != value) 
							|| (this._Set.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Set.Entity = null;
						previousValue.Materials.Remove(this);
					}
					this._Set.Entity = value;
					if ((value != null))
					{
						value.Materials.Add(this);
						this._SetID = value.SetID;
					}
					else
					{
						this._SetID = default(int);
					}
					this.SendPropertyChanged("Set");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialType_Material", Storage="_Type", ThisKey="TypeID", OtherKey="TypeID", IsForeignKey=true)]
		public MaterialType Type
		{
			get
			{
				return this._Type.Entity;
			}
			set
			{
				MaterialType previousValue = this._Type.Entity;
				if (((previousValue != value) 
							|| (this._Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type.Entity = null;
						previousValue.Materials.Remove(this);
					}
					this._Type.Entity = value;
					if ((value != null))
					{
						value.Materials.Add(this);
						this._TypeID = value.TypeID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("Type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_Material", Storage="_Shop", ThisKey="ShopID", OtherKey="ShopID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Shop Shop
		{
			get
			{
				return this._Shop.Entity;
			}
			set
			{
				Shop previousValue = this._Shop.Entity;
				if (((previousValue != value) 
							|| (this._Shop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shop.Entity = null;
						previousValue.Materials.Remove(this);
					}
					this._Shop.Entity = value;
					if ((value != null))
					{
						value.Materials.Add(this);
						this._ShopID = value.ShopID;
					}
					else
					{
						this._ShopID = default(int);
					}
					this.SendPropertyChanged("Shop");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pictures(MaterialPicture entity)
		{
			this.SendPropertyChanging();
			entity.Material = this;
		}
		
		private void detach_Pictures(MaterialPicture entity)
		{
			this.SendPropertyChanging();
			entity.Material = null;
		}
		
		private void attach_Votes(MaterialVote entity)
		{
			this.SendPropertyChanging();
			entity.Material = this;
		}
		
		private void detach_Votes(MaterialVote entity)
		{
			this.SendPropertyChanging();
			entity.Material = null;
		}
		
		private void attach_Prices(MaterialPrice entity)
		{
			this.SendPropertyChanging();
			entity.Material = this;
		}
		
		private void detach_Prices(MaterialPrice entity)
		{
			this.SendPropertyChanging();
			entity.Material = null;
		}
		
		private void attach_MaterialTypeFieldValues(MaterialTypeFieldValue entity)
		{
			this.SendPropertyChanging();
			entity.Material = this;
		}
		
		private void detach_MaterialTypeFieldValues(MaterialTypeFieldValue entity)
		{
			this.SendPropertyChanging();
			entity.Material = null;
		}
		
		private void attach_MaterialKeywords(MaterialKeyword entity)
		{
			this.SendPropertyChanging();
			entity.Material = this;
		}
		
		private void detach_MaterialKeywords(MaterialKeyword entity)
		{
			this.SendPropertyChanging();
			entity.Material = null;
		}
		
		private void attach_ShoppingCartItems(ShoppingCartItem entity)
		{
			this.SendPropertyChanging();
			entity.Material = this;
		}
		
		private void detach_ShoppingCartItems(ShoppingCartItem entity)
		{
			this.SendPropertyChanging();
			entity.Material = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MaterialTypes")]
	public partial class MaterialType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeID;
		
		private string _Name;
		
		private EntitySet<Material> _Materials;
		
		private EntitySet<MaterialTypeField> _Fields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public MaterialType()
		{
			this._Materials = new EntitySet<Material>(new Action<Material>(this.attach_Materials), new Action<Material>(this.detach_Materials));
			this._Fields = new EntitySet<MaterialTypeField>(new Action<MaterialTypeField>(this.attach_Fields), new Action<MaterialTypeField>(this.detach_Fields));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialType_Material", Storage="_Materials", ThisKey="TypeID", OtherKey="TypeID")]
		public EntitySet<Material> Materials
		{
			get
			{
				return this._Materials;
			}
			set
			{
				this._Materials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialType_MaterialTypeField", Storage="_Fields", ThisKey="TypeID", OtherKey="TypeID")]
		public EntitySet<MaterialTypeField> Fields
		{
			get
			{
				return this._Fields;
			}
			set
			{
				this._Fields.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Materials(Material entity)
		{
			this.SendPropertyChanging();
			entity.Type = this;
		}
		
		private void detach_Materials(Material entity)
		{
			this.SendPropertyChanging();
			entity.Type = null;
		}
		
		private void attach_Fields(MaterialTypeField entity)
		{
			this.SendPropertyChanging();
			entity.MaterialType = this;
		}
		
		private void detach_Fields(MaterialTypeField entity)
		{
			this.SendPropertyChanging();
			entity.MaterialType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MaterialTypeFieldValues")]
	public partial class MaterialTypeFieldValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _FieldID;
		
		private int _MateriaID;
		
		private string _Value;
		
		private EntityRef<Material> _Material;
		
		private EntityRef<MaterialTypeField> _MaterialTypeField;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFieldIDChanging(int value);
    partial void OnFieldIDChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public MaterialTypeFieldValue()
		{
			this._Material = default(EntityRef<Material>);
			this._MaterialTypeField = default(EntityRef<MaterialTypeField>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldID", DbType="Int NOT NULL")]
		public int FieldID
		{
			get
			{
				return this._FieldID;
			}
			set
			{
				if ((this._FieldID != value))
				{
					if (this._MaterialTypeField.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FieldID = value;
					this.SendPropertyChanged("FieldID");
					this.OnFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MateriaID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MateriaID;
			}
			set
			{
				if ((this._MateriaID != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MateriaID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_MaterialTypeFieldValue", Storage="_Material", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.FieldValues.Remove(this);
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.FieldValues.Add(this);
						this._MateriaID = value.MaterialID;
					}
					else
					{
						this._MateriaID = default(int);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialTypeField_MaterialTypeFieldValue", Storage="_MaterialTypeField", ThisKey="FieldID", OtherKey="FieldID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MaterialTypeField Field
		{
			get
			{
				return this._MaterialTypeField.Entity;
			}
			set
			{
				MaterialTypeField previousValue = this._MaterialTypeField.Entity;
				if (((previousValue != value) 
							|| (this._MaterialTypeField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialTypeField.Entity = null;
						previousValue.Values.Remove(this);
					}
					this._MaterialTypeField.Entity = value;
					if ((value != null))
					{
						value.Values.Add(this);
						this._FieldID = value.FieldID;
					}
					else
					{
						this._FieldID = default(int);
					}
					this.SendPropertyChanged("Field");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FieldUnits")]
	public partial class FieldUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<MaterialTypeField> _Fields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FieldUnit()
		{
			this._Fields = new EntitySet<MaterialTypeField>(new Action<MaterialTypeField>(this.attach_Fields), new Action<MaterialTypeField>(this.detach_Fields));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldUnit_MaterialTypeField", Storage="_Fields", ThisKey="ID", OtherKey="UnitID")]
		public EntitySet<MaterialTypeField> Fields
		{
			get
			{
				return this._Fields;
			}
			set
			{
				this._Fields.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fields(MaterialTypeField entity)
		{
			this.SendPropertyChanging();
			entity.Unit = this;
		}
		
		private void detach_Fields(MaterialTypeField entity)
		{
			this.SendPropertyChanging();
			entity.Unit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MaterialTypeFields")]
	public partial class MaterialTypeField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FieldID;
		
		private int _TypeID;
		
		private string _Name;
		
		private int _FieldType;
		
		private System.Nullable<int> _UnitID;
		
		private EntitySet<MaterialTypeFieldValue> _Values;
		
		private EntityRef<FieldUnit> _Unit;
		
		private EntityRef<MaterialType> _MaterialType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFieldIDChanging(int value);
    partial void OnFieldIDChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFieldTypeChanging(int value);
    partial void OnFieldTypeChanged();
    partial void OnUnitIDChanging(System.Nullable<int> value);
    partial void OnUnitIDChanged();
    #endregion
		
		public MaterialTypeField()
		{
			this._Values = new EntitySet<MaterialTypeFieldValue>(new Action<MaterialTypeFieldValue>(this.attach_Values), new Action<MaterialTypeFieldValue>(this.detach_Values));
			this._Unit = default(EntityRef<FieldUnit>);
			this._MaterialType = default(EntityRef<MaterialType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FieldID
		{
			get
			{
				return this._FieldID;
			}
			set
			{
				if ((this._FieldID != value))
				{
					this.OnFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FieldID = value;
					this.SendPropertyChanged("FieldID");
					this.OnFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._MaterialType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldType", DbType="Int NOT NULL")]
		public int FieldType
		{
			get
			{
				return this._FieldType;
			}
			set
			{
				if ((this._FieldType != value))
				{
					this.OnFieldTypeChanging(value);
					this.SendPropertyChanging();
					this._FieldType = value;
					this.SendPropertyChanged("FieldType");
					this.OnFieldTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="Int")]
		public System.Nullable<int> UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialTypeField_MaterialTypeFieldValue", Storage="_Values", ThisKey="FieldID", OtherKey="FieldID")]
		public EntitySet<MaterialTypeFieldValue> Values
		{
			get
			{
				return this._Values;
			}
			set
			{
				this._Values.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldUnit_MaterialTypeField", Storage="_Unit", ThisKey="UnitID", OtherKey="ID", IsForeignKey=true)]
		public FieldUnit Unit
		{
			get
			{
				return this._Unit.Entity;
			}
			set
			{
				FieldUnit previousValue = this._Unit.Entity;
				if (((previousValue != value) 
							|| (this._Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unit.Entity = null;
						previousValue.Fields.Remove(this);
					}
					this._Unit.Entity = value;
					if ((value != null))
					{
						value.Fields.Add(this);
						this._UnitID = value.ID;
					}
					else
					{
						this._UnitID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Unit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaterialType_MaterialTypeField", Storage="_MaterialType", ThisKey="TypeID", OtherKey="TypeID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MaterialType MaterialType
		{
			get
			{
				return this._MaterialType.Entity;
			}
			set
			{
				MaterialType previousValue = this._MaterialType.Entity;
				if (((previousValue != value) 
							|| (this._MaterialType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialType.Entity = null;
						previousValue.Fields.Remove(this);
					}
					this._MaterialType.Entity = value;
					if ((value != null))
					{
						value.Fields.Add(this);
						this._TypeID = value.TypeID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("MaterialType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Values(MaterialTypeFieldValue entity)
		{
			this.SendPropertyChanging();
			entity.Field = this;
		}
		
		private void detach_Values(MaterialTypeFieldValue entity)
		{
			this.SendPropertyChanging();
			entity.Field = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShoppingCarts")]
	public partial class ShoppingCart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CartID;
		
		private int _MemberID;
		
		private System.DateTime _DateOfCreate;
		
		private int _CityID;
		
		private string _Address;
		
		private string _Mobile;
		
		private string _Tels;
		
		private string _PostalCode;
		
		private string _Statement;
		
		private int _Cost;
		
		private int _CostUnit;
		
		private int _Status;
		
		private EntitySet<ShoppingCartItem> _Items;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCartIDChanging(int value);
    partial void OnCartIDChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnDateOfCreateChanging(System.DateTime value);
    partial void OnDateOfCreateChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnTelsChanging(string value);
    partial void OnTelsChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnStatementChanging(string value);
    partial void OnStatementChanged();
    partial void OnCostChanging(int value);
    partial void OnCostChanged();
    partial void OnCostUnitChanging(int value);
    partial void OnCostUnitChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public ShoppingCart()
		{
			this._Items = new EntitySet<ShoppingCartItem>(new Action<ShoppingCartItem>(this.attach_Items), new Action<ShoppingCartItem>(this.detach_Items));
			this._Member = default(EntityRef<Member>);
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CartID
		{
			get
			{
				return this._CartID;
			}
			set
			{
				if ((this._CartID != value))
				{
					this.OnCartIDChanging(value);
					this.SendPropertyChanging();
					this._CartID = value;
					this.SendPropertyChanged("CartID");
					this.OnCartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfCreate
		{
			get
			{
				return this._DateOfCreate;
			}
			set
			{
				if ((this._DateOfCreate != value))
				{
					this.OnDateOfCreateChanging(value);
					this.SendPropertyChanging();
					this._DateOfCreate = value;
					this.SendPropertyChanged("DateOfCreate");
					this.OnDateOfCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tels", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Tels
		{
			get
			{
				return this._Tels;
			}
			set
			{
				if ((this._Tels != value))
				{
					this.OnTelsChanging(value);
					this.SendPropertyChanging();
					this._Tels = value;
					this.SendPropertyChanged("Tels");
					this.OnTelsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Statement", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Statement
		{
			get
			{
				return this._Statement;
			}
			set
			{
				if ((this._Statement != value))
				{
					this.OnStatementChanging(value);
					this.SendPropertyChanging();
					this._Statement = value;
					this.SendPropertyChanged("Statement");
					this.OnStatementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Int NOT NULL")]
		public int Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostUnit", DbType="Int NOT NULL")]
		public int CostUnit
		{
			get
			{
				return this._CostUnit;
			}
			set
			{
				if ((this._CostUnit != value))
				{
					this.OnCostUnitChanging(value);
					this.SendPropertyChanging();
					this._CostUnit = value;
					this.SendPropertyChanged("CostUnit");
					this.OnCostUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShoppingCart_ShoppingCartItem", Storage="_Items", ThisKey="CartID", OtherKey="CartID")]
		public EntitySet<ShoppingCartItem> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_ShoppingCart", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.ShoppingCarts.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.ShoppingCarts.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_ShoppingCart", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.ShoppingCarts.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.ShoppingCarts.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(ShoppingCartItem entity)
		{
			this.SendPropertyChanging();
			entity.ShoppingCart = this;
		}
		
		private void detach_Items(ShoppingCartItem entity)
		{
			this.SendPropertyChanging();
			entity.ShoppingCart = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MemberInterests")]
	public partial class MemberInterest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InterestID;
		
		private int _MemberID;
		
		private string _Name;
		
		private int _TotalPoints;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInterestIDChanging(int value);
    partial void OnInterestIDChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTotalPointsChanging(int value);
    partial void OnTotalPointsChanged();
    #endregion
		
		public MemberInterest()
		{
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InterestID
		{
			get
			{
				return this._InterestID;
			}
			set
			{
				if ((this._InterestID != value))
				{
					this.OnInterestIDChanging(value);
					this.SendPropertyChanging();
					this._InterestID = value;
					this.SendPropertyChanged("InterestID");
					this.OnInterestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPoints", DbType="Int NOT NULL")]
		public int TotalPoints
		{
			get
			{
				return this._TotalPoints;
			}
			set
			{
				if ((this._TotalPoints != value))
				{
					this.OnTotalPointsChanging(value);
					this.SendPropertyChanging();
					this._TotalPoints = value;
					this.SendPropertyChanged("TotalPoints");
					this.OnTotalPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_MemberInterest", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Interests.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Interests.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MaterialKeywords")]
	public partial class MaterialKeyword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KeywordID;
		
		private int _MaterialID;
		
		private string _Word;
		
		private int _Type;
		
		private EntityRef<Material> _Material;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeywordIDChanging(int value);
    partial void OnKeywordIDChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnWordChanging(string value);
    partial void OnWordChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
		
		public MaterialKeyword()
		{
			this._Material = default(EntityRef<Material>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeywordID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int KeywordID
		{
			get
			{
				return this._KeywordID;
			}
			set
			{
				if ((this._KeywordID != value))
				{
					this.OnKeywordIDChanging(value);
					this.SendPropertyChanging();
					this._KeywordID = value;
					this.SendPropertyChanged("KeywordID");
					this.OnKeywordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Word", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Word
		{
			get
			{
				return this._Word;
			}
			set
			{
				if ((this._Word != value))
				{
					this.OnWordChanging(value);
					this.SendPropertyChanging();
					this._Word = value;
					this.SendPropertyChanged("Word");
					this.OnWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_MaterialKeyword", Storage="_Material", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.Keywords.Remove(this);
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.Keywords.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(int);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShoppingCartItems")]
	public partial class ShoppingCartItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CartItemID;
		
		private int _CartID;
		
		private int _MaterialID;
		
		private int _Quantity;
		
		private int _FinalPrice;
		
		private int _FinalPriceUnit;
		
		private EntityRef<Material> _Material;
		
		private EntityRef<ShoppingCart> _ShoppingCart;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCartItemIDChanging(int value);
    partial void OnCartItemIDChanged();
    partial void OnCartIDChanging(int value);
    partial void OnCartIDChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnFinalPriceChanging(int value);
    partial void OnFinalPriceChanged();
    partial void OnFinalPriceUnitChanging(int value);
    partial void OnFinalPriceUnitChanged();
    #endregion
		
		public ShoppingCartItem()
		{
			this._Material = default(EntityRef<Material>);
			this._ShoppingCart = default(EntityRef<ShoppingCart>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CartItemID
		{
			get
			{
				return this._CartItemID;
			}
			set
			{
				if ((this._CartItemID != value))
				{
					this.OnCartItemIDChanging(value);
					this.SendPropertyChanging();
					this._CartItemID = value;
					this.SendPropertyChanged("CartItemID");
					this.OnCartItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartID", DbType="Int NOT NULL")]
		public int CartID
		{
			get
			{
				return this._CartID;
			}
			set
			{
				if ((this._CartID != value))
				{
					if (this._ShoppingCart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCartIDChanging(value);
					this.SendPropertyChanging();
					this._CartID = value;
					this.SendPropertyChanged("CartID");
					this.OnCartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinalPrice", DbType="Int NOT NULL")]
		public int FinalPrice
		{
			get
			{
				return this._FinalPrice;
			}
			set
			{
				if ((this._FinalPrice != value))
				{
					this.OnFinalPriceChanging(value);
					this.SendPropertyChanging();
					this._FinalPrice = value;
					this.SendPropertyChanged("FinalPrice");
					this.OnFinalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinalPriceUnit", DbType="Int NOT NULL")]
		public int FinalPriceUnit
		{
			get
			{
				return this._FinalPriceUnit;
			}
			set
			{
				if ((this._FinalPriceUnit != value))
				{
					this.OnFinalPriceUnitChanging(value);
					this.SendPropertyChanging();
					this._FinalPriceUnit = value;
					this.SendPropertyChanged("FinalPriceUnit");
					this.OnFinalPriceUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_ShoppingCartItem", Storage="_Material", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.ShoppingCartItems.Remove(this);
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.ShoppingCartItems.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(int);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShoppingCart_ShoppingCartItem", Storage="_ShoppingCart", ThisKey="CartID", OtherKey="CartID", IsForeignKey=true)]
		public ShoppingCart ShoppingCart
		{
			get
			{
				return this._ShoppingCart.Entity;
			}
			set
			{
				ShoppingCart previousValue = this._ShoppingCart.Entity;
				if (((previousValue != value) 
							|| (this._ShoppingCart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShoppingCart.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._ShoppingCart.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._CartID = value.CartID;
					}
					else
					{
						this._CartID = default(int);
					}
					this.SendPropertyChanged("ShoppingCart");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InboxMessages")]
	public partial class InboxMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InboxID;
		
		private int _MemberID;
		
		private int _SenderID;
		
		private string _Subject;
		
		private string _Text;
		
		private System.DateTime _DateOfRecieve;
		
		private bool _IsRead;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<Member> _Member1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInboxIDChanging(int value);
    partial void OnInboxIDChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnSenderIDChanging(int value);
    partial void OnSenderIDChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnDateOfRecieveChanging(System.DateTime value);
    partial void OnDateOfRecieveChanged();
    partial void OnIsReadChanging(bool value);
    partial void OnIsReadChanged();
    #endregion
		
		public InboxMessage()
		{
			this._Member = default(EntityRef<Member>);
			this._Member1 = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InboxID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InboxID
		{
			get
			{
				return this._InboxID;
			}
			set
			{
				if ((this._InboxID != value))
				{
					this.OnInboxIDChanging(value);
					this.SendPropertyChanging();
					this._InboxID = value;
					this.SendPropertyChanged("InboxID");
					this.OnInboxIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderID", DbType="Int NOT NULL")]
		public int SenderID
		{
			get
			{
				return this._SenderID;
			}
			set
			{
				if ((this._SenderID != value))
				{
					if (this._Member1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderIDChanging(value);
					this.SendPropertyChanging();
					this._SenderID = value;
					this.SendPropertyChanged("SenderID");
					this.OnSenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfRecieve", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfRecieve
		{
			get
			{
				return this._DateOfRecieve;
			}
			set
			{
				if ((this._DateOfRecieve != value))
				{
					this.OnDateOfRecieveChanging(value);
					this.SendPropertyChanging();
					this._DateOfRecieve = value;
					this.SendPropertyChanged("DateOfRecieve");
					this.OnDateOfRecieveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRead", DbType="Bit NOT NULL")]
		public bool IsRead
		{
			get
			{
				return this._IsRead;
			}
			set
			{
				if ((this._IsRead != value))
				{
					this.OnIsReadChanging(value);
					this.SendPropertyChanging();
					this._IsRead = value;
					this.SendPropertyChanged("IsRead");
					this.OnIsReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_InboxMessage", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.InboxMessages.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.InboxMessages.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_InboxMessage1", Storage="_Member1", ThisKey="SenderID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Sender
		{
			get
			{
				return this._Member1.Entity;
			}
			set
			{
				Member previousValue = this._Member1.Entity;
				if (((previousValue != value) 
							|| (this._Member1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member1.Entity = null;
						previousValue.XXXXXX.Remove(this);
					}
					this._Member1.Entity = value;
					if ((value != null))
					{
						value.XXXXXX.Add(this);
						this._SenderID = value.MemberID;
					}
					else
					{
						this._SenderID = default(int);
					}
					this.SendPropertyChanged("Sender");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SentBoxMessages")]
	public partial class SentBoxMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SentBoxID;
		
		private int _MemberID;
		
		private int _RecieverID;
		
		private string _Subject;
		
		private string _Text;
		
		private System.DateTime _DateOfSend;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<Member> _Member1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSentBoxIDChanging(int value);
    partial void OnSentBoxIDChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnRecieverIDChanging(int value);
    partial void OnRecieverIDChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnDateOfSendChanging(System.DateTime value);
    partial void OnDateOfSendChanged();
    #endregion
		
		public SentBoxMessage()
		{
			this._Member = default(EntityRef<Member>);
			this._Member1 = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SentBoxID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SentBoxID
		{
			get
			{
				return this._SentBoxID;
			}
			set
			{
				if ((this._SentBoxID != value))
				{
					this.OnSentBoxIDChanging(value);
					this.SendPropertyChanging();
					this._SentBoxID = value;
					this.SendPropertyChanged("SentBoxID");
					this.OnSentBoxIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecieverID", DbType="Int NOT NULL")]
		public int RecieverID
		{
			get
			{
				return this._RecieverID;
			}
			set
			{
				if ((this._RecieverID != value))
				{
					if (this._Member1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecieverIDChanging(value);
					this.SendPropertyChanging();
					this._RecieverID = value;
					this.SendPropertyChanged("RecieverID");
					this.OnRecieverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfSend", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfSend
		{
			get
			{
				return this._DateOfSend;
			}
			set
			{
				if ((this._DateOfSend != value))
				{
					this.OnDateOfSendChanging(value);
					this.SendPropertyChanging();
					this._DateOfSend = value;
					this.SendPropertyChanged("DateOfSend");
					this.OnDateOfSendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_SentBoxMessage", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.SentBoxMessages.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.SentBoxMessages.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_SentBoxMessage1", Storage="_Member1", ThisKey="RecieverID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Reciever
		{
			get
			{
				return this._Member1.Entity;
			}
			set
			{
				Member previousValue = this._Member1.Entity;
				if (((previousValue != value) 
							|| (this._Member1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member1.Entity = null;
						previousValue.XXXXXXXXX.Remove(this);
					}
					this._Member1.Entity = value;
					if ((value != null))
					{
						value.XXXXXXXXX.Add(this);
						this._RecieverID = value.MemberID;
					}
					else
					{
						this._RecieverID = default(int);
					}
					this.SendPropertyChanged("Reciever");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Logins")]
	public partial class Login : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MemberID;
		
		private System.DateTime _DateOfLogin;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnDateOfLoginChanging(System.DateTime value);
    partial void OnDateOfLoginChanged();
    #endregion
		
		public Login()
		{
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfLogin", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfLogin
		{
			get
			{
				return this._DateOfLogin;
			}
			set
			{
				if ((this._DateOfLogin != value))
				{
					this.OnDateOfLoginChanging(value);
					this.SendPropertyChanging();
					this._DateOfLogin = value;
					this.SendPropertyChanged("DateOfLogin");
					this.OnDateOfLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Login", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Logins.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Logins.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cities")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityID;
		
		private string _CityName;
		
		private int _StateID;
		
		private EntitySet<Member> _Members;
		
		private EntitySet<ShoppingCart> _ShoppingCarts;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    #endregion
		
		public City()
		{
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			this._ShoppingCarts = new EntitySet<ShoppingCart>(new Action<ShoppingCart>(this.attach_ShoppingCarts), new Action<ShoppingCart>(this.detach_ShoppingCarts));
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int NOT NULL")]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Member", Storage="_Members", ThisKey="CityID", OtherKey="CityID")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_ShoppingCart", Storage="_ShoppingCarts", ThisKey="CityID", OtherKey="CityID")]
		public EntitySet<ShoppingCart> ShoppingCarts
		{
			get
			{
				return this._ShoppingCarts;
			}
			set
			{
				this._ShoppingCarts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_City", Storage="_State", ThisKey="StateID", OtherKey="StateID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._StateID = value.StateID;
					}
					else
					{
						this._StateID = default(int);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_ShoppingCarts(ShoppingCart entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_ShoppingCarts(ShoppingCart entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShopLogins")]
	public partial class ShopLogin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ShopID;
		
		private System.DateTime _DateOfLogin;
		
		private EntityRef<Shop> _Shop;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnShopIDChanging(int value);
    partial void OnShopIDChanged();
    partial void OnDateOfLoginChanging(System.DateTime value);
    partial void OnDateOfLoginChanged();
    #endregion
		
		public ShopLogin()
		{
			this._Shop = default(EntityRef<Shop>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShopID", DbType="Int NOT NULL")]
		public int ShopID
		{
			get
			{
				return this._ShopID;
			}
			set
			{
				if ((this._ShopID != value))
				{
					if (this._Shop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShopIDChanging(value);
					this.SendPropertyChanging();
					this._ShopID = value;
					this.SendPropertyChanged("ShopID");
					this.OnShopIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfLogin", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfLogin
		{
			get
			{
				return this._DateOfLogin;
			}
			set
			{
				if ((this._DateOfLogin != value))
				{
					this.OnDateOfLoginChanging(value);
					this.SendPropertyChanging();
					this._DateOfLogin = value;
					this.SendPropertyChanged("DateOfLogin");
					this.OnDateOfLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_ShopLogin", Storage="_Shop", ThisKey="ShopID", OtherKey="ShopID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Shop Shop
		{
			get
			{
				return this._Shop.Entity;
			}
			set
			{
				Shop previousValue = this._Shop.Entity;
				if (((previousValue != value) 
							|| (this._Shop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shop.Entity = null;
						previousValue.Logins.Remove(this);
					}
					this._Shop.Entity = value;
					if ((value != null))
					{
						value.Logins.Add(this);
						this._ShopID = value.ShopID;
					}
					else
					{
						this._ShopID = default(int);
					}
					this.SendPropertyChanged("Shop");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Shops")]
	public partial class Shop : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShopID;
		
		private int _Type;
		
		private string _Name;
		
		private string _Address;
		
		private string _Owner;
		
		private string _Mobile;
		
		private string _Tels;
		
		private string _UserName;
		
		private System.DateTime _DateOfJoin;
		
		private EntitySet<Material> _Materials;
		
		private EntitySet<ShopLogin> _Logins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShopIDChanging(int value);
    partial void OnShopIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnOwnerChanging(string value);
    partial void OnOwnerChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnTelsChanging(string value);
    partial void OnTelsChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnDateOfJoinChanging(System.DateTime value);
    partial void OnDateOfJoinChanged();
    #endregion
		
		public Shop()
		{
			this._Materials = new EntitySet<Material>(new Action<Material>(this.attach_Materials), new Action<Material>(this.detach_Materials));
			this._Logins = new EntitySet<ShopLogin>(new Action<ShopLogin>(this.attach_Logins), new Action<ShopLogin>(this.detach_Logins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShopID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ShopID
		{
			get
			{
				return this._ShopID;
			}
			set
			{
				if ((this._ShopID != value))
				{
					this.OnShopIDChanging(value);
					this.SendPropertyChanging();
					this._ShopID = value;
					this.SendPropertyChanged("ShopID");
					this.OnShopIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Owner", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tels", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Tels
		{
			get
			{
				return this._Tels;
			}
			set
			{
				if ((this._Tels != value))
				{
					this.OnTelsChanging(value);
					this.SendPropertyChanging();
					this._Tels = value;
					this.SendPropertyChanged("Tels");
					this.OnTelsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfJoin", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfJoin
		{
			get
			{
				return this._DateOfJoin;
			}
			set
			{
				if ((this._DateOfJoin != value))
				{
					this.OnDateOfJoinChanging(value);
					this.SendPropertyChanging();
					this._DateOfJoin = value;
					this.SendPropertyChanged("DateOfJoin");
					this.OnDateOfJoinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_Material", Storage="_Materials", ThisKey="ShopID", OtherKey="ShopID")]
		public EntitySet<Material> Materials
		{
			get
			{
				return this._Materials;
			}
			set
			{
				this._Materials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shop_ShopLogin", Storage="_Logins", ThisKey="ShopID", OtherKey="ShopID")]
		public EntitySet<ShopLogin> Logins
		{
			get
			{
				return this._Logins;
			}
			set
			{
				this._Logins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Materials(Material entity)
		{
			this.SendPropertyChanging();
			entity.Shop = this;
		}
		
		private void detach_Materials(Material entity)
		{
			this.SendPropertyChanging();
			entity.Shop = null;
		}
		
		private void attach_Logins(ShopLogin entity)
		{
			this.SendPropertyChanging();
			entity.Shop = this;
		}
		
		private void detach_Logins(ShopLogin entity)
		{
			this.SendPropertyChanging();
			entity.Shop = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SlidingImages")]
	public partial class SlidingImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Url;
		
		private double _Sequence;
		
		private int _AssociatedMaterialID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnSequenceChanging(double value);
    partial void OnSequenceChanged();
    partial void OnAssociatedMaterialIDChanging(int value);
    partial void OnAssociatedMaterialIDChanged();
    #endregion
		
		public SlidingImage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sequence", DbType="Float NOT NULL")]
		public double Sequence
		{
			get
			{
				return this._Sequence;
			}
			set
			{
				if ((this._Sequence != value))
				{
					this.OnSequenceChanging(value);
					this.SendPropertyChanging();
					this._Sequence = value;
					this.SendPropertyChanged("Sequence");
					this.OnSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssociatedMaterialID", DbType="Int NOT NULL")]
		public int AssociatedMaterialID
		{
			get
			{
				return this._AssociatedMaterialID;
			}
			set
			{
				if ((this._AssociatedMaterialID != value))
				{
					this.OnAssociatedMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._AssociatedMaterialID = value;
					this.SendPropertyChanged("AssociatedMaterialID");
					this.OnAssociatedMaterialIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
